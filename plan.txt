
использование паттернов для организации кода (singleton для хранения данных об авторизации,
 observer для отслеживание изменения состояния
 (который динамически загружает JavaScript-модули, основываясь на изменениях DOM???мбДАмбНЕ) и перерисовки dom и т.д.)



все ui элементы должны быть разделены по отдельным классам/функциям.
	класс ui компонента должен отвечать только за отображение информации в dom и за dom манипуляции, и не должен хранить
	   данные или состояние todo списка
	класс ui компонента не должен самостоятельно обновлять данные или изменять содержимое todo списка
	ui компоненты могут генерировать сообщения для класса хранения состояни (о нем далее)
	ui компоненты могут подписываться на изменения состояния из класса хранения состояни (о нем далее)

	ПРИМЕР РАЗДЕЛЕНИЯ ПО КЛАССАМ
		компонент формы логина
		компонент ввода нового элемента списка
		компонент списка
		компонент элемента списка
		компонент кнопок (которые отображаются на элементе при наведении)
		и т.д.


за манипуляцию данными должен отвечать отдельный класс
    класс должен хранить данные о todo списке
    должен иметь интерфейс для прослушки сообщений, и изменять свое состояние в соответствии с конкретным сообщением
    класс должен предоставлять возможность подписки на изменение состояния


Если в анфинишед отметить что сделал, перекидывает на все задачи
    Роутинг
    Регистрация

РЕФАКТОРСЦУЧКА